#!/bin/sh 
#
# Go to other machine easily.
#

IFS=' 
	'
#PATH=/usr/local/bin:/usr/bin:/bin
#export PATH

FULLNAME=`readlink -f $0`
source $(dirname $FULLNAME)/func.inc.sh

usage() { cat <<EOF
USAGE:  $PROGRAM        [user@]hostname [command] [args ...]
        $PROGRAM        [OPTIONS]
OPTIONS:
  -h, --help                : show help message
  -e, --edit                : edit g's configuration 
  -v, --version             : version
AUTHOR:
    sunshengxiang01@baidu.com
EOF
}

sshg()
{
    TMPFILE=$(mktemp)
    trap "/bin/rm $TMPFILE" EXIT

    local user=$1 patten=$2; shift 2

    GGREPFLAGS="-a"
    test -n "$user" && GGREPFLAGS="$GGREPFLAGS -u $user"
    $GOGREP $GGREPFLAGS $patten > $TMPFILE

    case $? in
    1)  echo "[WARNING] no user or hostname match $user@$patten"
        read -p "Username: " user
        ssh -o StrictHostKeyChecking=no $user@$patten
        break
        ;;
    2)  echo "[ERROR] too many hostname match"
        echo "The top 10 are --\\"
        cat $TMPFILE | head -n10 | awk '{print $1}'
        break
        ;;
    *)
        read user_host pass < $TMPFILE
        $CWD/sshpass -p $pass ssh -o StrictHostKeyChecking=no "$user_host" "$@"
        test $? -eq 5 && ssh "$user_host" "$@"
        break
    esac
}


#
# User definitions
#
PROGRAM=$(basename $0)
USER=
VERSION=1.9.2
# 1.8   change go to g
# 1.9   change structure, g -> go
# 1.9.1 go add base64 encode


test $# -eq 0 &&  usage_and_exit 1

#
# Parse parameters
#
cmd=    diff=
while test $# -ne 0
do
    case $1 in
    -h|--help)  usage_and_exit 0
        ;;
    -v|--version) version && exit 0
        ;;
    -e|--edit)  vim $GOCONF; exit
        ;;
    *)  break ;;
    esac
    shift
done

#
# Jump to other machine
#
if echo "$1" | grep -q '@'
then
    USER=`echo $1 | cut -d'@' -f1`
    HOSTNICK=`echo $1 | cut -d'@' -f2`
else
    HOSTNICK=$1
fi
shift

sshg "$USER" "$HOSTNICK" "$@"

