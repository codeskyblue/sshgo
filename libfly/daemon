#!/bin/sh -
#
# By:       Sun,Shengxiang
# Created:  2012-8-28
# Modified: 2012-9-2
# Modified: 2012-11-12      # add supervise function
# Modified: 2012-11-16      # add daemon control.log
# Modified: 2012-11-24      # add --chdir --pidfile --stdout --stderr, modify help message (version 1.6)
# Modified: 2012-11-25      # add --name (version 1.7)
# Modified: 2012-12-03      # add --timeout
# Modified: 2012-12-05      # bug fix, default stdout stderr
# Modified: 2012-12-10      # add --debug
# Modified: 2012-12-31      # support find program in $PATH, remove <start|stop|restart>, use : as sep
# Modified: 2013-01-06      # 1.9.4 fix pidfile not clean when --chdir is specified
# Modified: 2013-01-07      # 1.9.5 some pc's readlink -f not working, use python os.path.abspath instead
# Modified: 2013-01-07      # 1.9.6 add respawn support
# Modified: 2013-04-26      # 1.9.7 fix stdout=stderr, output mixed bug
#
# run program in as a daemon, easy start and stop
# if program realize daemon function itself, then this little script may not work fine.
#

IFS=' 
	'

EXITCODE=0
error(){ echo "$@" 1>&2; exit 1; }
warning(){ echo "$@" 1>&2; EXITCODE=`expr $EXITCODE + 1`; }
prompt(){   echo $@ 1>&2;}
abspath(){  echo "import os; print os.path.abspath('$1');" | python; }

PROGRAM=$(basename $0)
VERSION=1.9.7

#errtrap(){ echo error occur in $LINENO; }
#trap "echo error occur in $LINENO, status: $?; sed -n $LINENO,${LINENO}p $0; exit 1" ERR   # trap error, if happens that's a bug
#trap "echo Try $PROGRAM --help for more information >&2; exit 1" ERR   # trap error, if happens that's a bug

usage_and_exit(){  usage; exit $1; }
usage(){ cat <<EOF
Usage: $PROGRAM [options] -- cmd [arg1, arg2...] 
options:
    
    -h, --help          : print a help message and exit
    -v, --verion        : print a version message and exit
    --debug             : Enable debug mode

    --chdir=path        : Run the client in directory path

    -r, --respawn       : Respawn the client when it terminates
    -L, --delay=n       : Delay between spawn attempt bursts (seconds)
    -M, --limit=n       : Maximum number of spawn attempt bursts

    --name=...          : Guarantee a single named instance (default: cmd)
    --pidfile=spec      : Override standard pidfile name and location (default: \$name.daemon.pid)
    --dbglog=spec       : Send daemon's debug output to syslog or file (default: \$/dev/null)
    --stdout=spec       : Send client's stdout to syslog or file  (default: /dev/null)
    --stderr=spec       : Send client's stdout to syslog or file  (default: /dev/null)
    --output=spec       : stdout and stderr to spec

    --timeout=n         : Time out set n seconds, kill it it exceed

    --running           : Check if a named daemon is running
    --restart           : Restart a named daemon client
    --stop              : Terminate a named daemon process 
EOF
}

stdout= stderr= dbglog=
pidfile= 
respawn=false delay=1 limit=
name=
timeout=

OPTS=`getopt -n $PROGRAM -o r,v,h,L:,M: -l \
    "version,help,debug,chdir:,name:,pidfile:,dbglog:,stdout:,stderr:,output:,timeout:,respawn,delay:,limit:,stop,running,restart" -- "$@"`
test $? -ne 0 && usage_and_exit 1
eval set -- "$OPTS"

while test $# -ne 0
do
    case $1 in
        -v|--version) 
            echo "$PROGRAM version $VERSION"; 
            exit 0;;
        -h|--help)
            usage_and_exit 0
            ;;
        --chdir)    shift
            workdir=$1
            ;;
        --debug)    set -x
            ;;
        --name)     shift
            name=$1
            ;;
        --pidfile)  shift
            pidfile=$1
            ;;
        --dbglog)   shift
            dbglog=$1
            ;;
        --stdout)   shift
            stdout=$1
            ;;
        --stderr)   shift
            stderr=$1
            ;;
        --output)   shift
            stdout=$1
            stderr=$1
            ;;
        --timeout)  shift
            timeout=$1
            ;;
        -r|--respawn)
            respawn=true
            ;;
        -L|--delay) shift
            delay=$1
            ;;
        -M|--limit) shift
            limit=$1
            ;;
        --running)  shift
            _control="status"
            ;;
        --stop)
            _control="stop"
            ;;
        --restart)
            _control="restart"
            ;;
        --) shift; break
            ;;
        *)  break
            ;;
    esac
    shift
done

if test $# -lt 1
then
    usage_and_exit 1
fi

check(){  
    test -n "`ps -p $1 --no-headers`"; 
}

is_running(){
    if test -f $pidfile
    then
        if check $(head -n1 $pidfile)
        then
            return 0
        else
            #prompt remove pid file
            /bin/rm $pidfile
            return 1
        fi
    fi
    return 1
}

start(){
    if is_running
    then
        prompt "$name is already running..."
        exit 1
    fi

    tempfile=$(mktemp /tmp/daemon.XXXXXXXX)
    sed -n '/^### MONITOR_FILE_START/,/^### MONITOR_FILE_END/p' $0 > $tempfile
    (setsid  /bin/bash $tempfile $param &>/dev/null <<-EOF &)
        $program:$workdir:$pidfile:$stdout:$stderr:$dbglog:$timeout:${delay:?}:$respawn:$limit
	EOF

    sleep 1
    if test -f $pidfile
    then
        prompt "$name  started"
    else
        prompt "$name  quit immediately"
        exit 1
    fi
}

stop(){
    if test -f $pidfile
    then
        sid=$(head -n1 $pidfile)
        kill -TERM $sid
        for i in `seq 1 25`  # 2.5s
        do
            printf "import time; time.sleep(0.1)" | python
            #prompt check $i
            if ! is_running
            then
                prompt "$program stoped"
                return 0
                break
            fi
        done
        prompt "$name can't stop, please check authority"
        return 1
    else
        prompt "$name is not running..."
        return 0
    fi
}

status(){
    if is_running
    then
        prompt "$name is running"
        return 0
    else
        prompt "$name is not running"
        return 1
    fi
}

# find program location
#
if test -f "$1"
then
    test -x "$1" || error "'$1' is not executable"
    program=$(cd $(dirname $1); pwd)/$(basename $1)
    #echo "use local program: $program"
else
    program=$(type -p $1)
    test -n "$program" || error "'$1' not in \$PATH"
    prompt "use program in \$PATH: $program"
fi
shift   # pass the main program

param=$@

#ctl=$(eval "echo \${$#}")
#if test "$ctl" != "start" -a "$ctl" != "stop" -a "$ctl" != "restart" -a "$ctl" != "status"
#then
#    ctl="start"
#    stdout=${stdout:-"/dev/null"} stderr=${stderr:-"/dev/null"}
#    param=$@
#else
#    param=$(echo "$@" | awk '{ ORS=" "; for(i=1;i<NF;i++) print $i}')
#fi

: ${name:="$program"}
: ${pidfile:="$name.daemon.pid"}
: ${stdout:="/dev/null"}
: ${stderr:="/dev/null"}
: ${dbglog:="/dev/null"}
: ${workdir:="$PWD"}

test "$pidfile" = ".daemon.pid" && error "daemon.pid file must be specified"

# change to full path
stdout=$(abspath $stdout)
stderr=$(abspath $stderr)
dbglog=$(abspath $dbglog)
pidfile=$(abspath $pidfile)  

#case $ctl in
test -z "$_control" && _control=start
case $_control in
    start|star|sta) 
        start;;
    stop |sto)       
        stop;;
    restart| restar | resta | res | re | r)    
        stop && start;;
    status | statu | stat)     
        status;;
    *)          
        echo "'$_control' is not an option"; exit 1;;
esac

exit

### MONITOR_FILE_START
#!/bin/sh
#
# initial environment
#
/bin/rm "$0"  # remove self

IFS=: read program workdir pidfile stdout stderr dbglog timeout delay respawn limit
param=$@

echo $$ > "$pidfile"
cd "$workdir"

#
# terminal run program handler(signal-TERM)
#
check(){  test -n "`ps -p $1 --no-headers`"; }
prompt(){ echo "[LOG] %s %s\n" $(date "+%Y-%m-%d %H:%M:%S") "$*" >> "$dbglog"; }

prompt "program     : $program $param"
prompt "stdout:     : ${stdout##*/}"
prompt "stderr:     : ${stderr##*/}"
prompt "working pwd : $workdir"

# return exec count
signal_process(){
    local cnt=0
    ps -s $$ -o ppid,pid,sid --no-headers  |
        sed "s/$/ $chldpid/" | 
            awk '{if ( $2 == $4 || ($1 != $3 && $2 != $3)) print $2; }' |
                (while read pid
                do
                    prompt "exec command $@ $pid"
                    check $pid && $@ $pid && cnt=`expr $cnt + 1` 
                done && return $cnt)
}

term_handler(){
    for signal in TERM KILL
    do
        prompt "sending $signal signal to session($$)"
        signal_process kill -$signal
        signal_process : && break
        sleep 1
    done
}
trap 'continue=false; term_handler' TERM QUIT HUP INT

#
# supervise program, shutdown by set continue=false
#
#

continue=true
while test "$continue" = "true"
do
    if test "$stdout" = "$stderr"
    then
        $program $param &>$stdout &
        chldpid=$!; 
    else
        $program $param 1>$stdout 2>$stderr &
        chldpid=$!; 
    fi
    prompt "$(basename program) run as pid($chldpid)"

    # timeout option
    if test -n "$timeout"
    then
        prompt "set timeout = $timeout"
        (sleep $timeout && prompt "program timeout" && kill $$)&
        tmopid=$!
    fi
    wait $chldpid ; exitcode=$? 
    prompt "exitcode = $exitcode"

    # judge if continue
    if test "$respawn" = "true"
    then
        if test -n "$limit" 
        then
            limit=`expr $limit - 1`
            prompt "limit = $limit"
            if test "$limit" -le 0
            then
                continue=false
                prompt "limit finished"
            fi
        fi
    else
        continue=false
    fi
            
    #    test $exitcode -le 128 && continue=false  # exitcode >= 128 means killed by signal

    prompt "continue = $continue"
	if test "$continue" = "true"
    then
        term_handler # stop first
        prompt "program restart"
        test -n "$delay" && sleep $delay
    else
        test -n "tmopid" && prompt "kill timeout function" && kill $tmopid
    fi
done
prompt "rm pidfile: $pidfile"
/bin/rm $pidfile
prompt "=============== END ==============="

### MONITOR_FILE_END
